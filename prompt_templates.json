{
  "chat": {
    "_description": "simple prompting",
    "input_variables": ["input"],
    "template": "{input}"
  },
  "Prompt_gen1": {
    "_description": "domain > prpr_1",
    "input_variables": ["domain"],
    "template": "Collect your thoughts and assume the role of an expert in {domain}. Use the following structure to return a prompt that have transferability to other domains and don't reference the given {domain}: \"transferable_idea\": PromptTemplate( input_variables=[\"input\"], template=\"your prompt here can wrap {{thing}}\", ),"
  },
  "Prompt_gen2": {
    "_description": "domain > prpr_2",
    "input_variables": ["domain"],
    "template": "Imagine that you are an expert in {domain}, and you want to explore how the concepts and ideas from that domain can be applied to other areas. Using the following relative structure (take some creative liberty occasionally), provide a prompt that illustrate transferable ideas that don't reference the original domain explicitly: \"transferable_idea\": PromptTemplate( input_variables=[\"MUST_BE_PRESENT_INPUT_VAR\"], template=\"your ideas about {{MUST_BE_PRESENT_INPUT_VAR}} ending in some open ended way\",), *ensure formatting, don't mention original domain, and end your prompt with ONE of the following not always a question,.:;?"
  },
  "test": {
    "_description": "app_idea > test",
    "input_variables": ["app_idea"],
    "template": "write me a python app to do the following, include all necessary imports: {app_idea}"
  },
  "front": {
    "_description": "test > front",
    "input_variables": ["test"],
    "template": "write me a flask front end for this code called test.py, include all necessary imports: {test}"
  },
  "bugs": {
    "_description": "test > bugs",
    "input_variables": ["test"],
    "template": "pretend you are a python compiler, run the following code and determine if there are errors, test.py: {test}"
  },
  "prompt_gpt": {
    "_description": "expert > expertGPT",
    "input_variables": ["expertise"],
    "template": "The goal of this exercise is to create an optimal prompt for an AI assistant to become a professional at {expertise}. To do this, think about what qualities a professional in {expertise} should possess. Consider qualities such as creativity, conciseness, clarity, and education to be the goal of this exercise. Then, create a prompt that incorporates these qualities and challenges the AI assistant to apply them to their prompt interactions with the user."
  },
  "front_code_in": {
    "_description": "create a front end from code",
    "input_variables": ["code"],
    "template": "Write a Flask front end for this code: {code}"
  },
  "compress": {
    "_description": "compress text 2",
    "input_variables": ["compress"],
    "template": "compress the following text in a way that is lossless but results in the minimum number of tokens which could be fed into an LLM like yourself as-is and produce the same output. feel free to use multiple languages, symbols, other up-front priming to lay down rules. this is entirely for yourself to recover and proceed from with the same conceptual priming, not for humans to decompress: {compress}"
  },
  "decompress": {
    "_description": "decompress text",
    "input_variables": ["compress"],
    "template": "Reconstruct the original text from the compressed version below: {compress}"
  },
  "compare_stats": {
    "_description": "evaluate compression",
    "input_variables": ["compress", "decompress"],
    "template": "Statistically tell me about the effectiveness of this compression in terms of size reduction, and maintenance of information conveyed, original text -> decompressed text is most important./n    compressed: {compress} /n    decompressed: {decompress}"
  },
  "syntax_up": {
    "_description": "improve syntax for input",
    "input_variables": ["input"],
    "template": "improve the syntax of the following: {input}"
  },
  "comp_test": {
    "_description": "write a test input for compression testing",
    "input_variables": ["field", "char_length"],
    "template": "You are an expert in {field}, write a {char_length}+ character sample text with densely packed information presented in as concise a manner as possible where you utilize every character to the best of your ability."
  }
}
