{
  "chat": {
    "_description": "simple prompting",
    "input_variables": ["input"],
    "template": "{input}"
  },
  "st_memory": {
    "_description": "short term memory prompting",
    "input_variables": ["input", "input_2"],
    "template": "{input} /n {input_2}"
  },
  "Prompt_gen1": {
    "_description": "action > prompt",
    "input_variables": ["pr_action"],
    "template": "Use the following structure to return a prompt that {pr_action}: \"prompt_xyz\": PromptTemplate( input_variables=[\"input\", \"next_input_if_need\"], template=\"your prompt here can wrap {{input(s)}} etc. \", ),"
  },
  "Prompt_gen2": {
    "_description": "domain > prpr_2",
    "input_variables": ["domain"],
    "template": "Imagine that you are an expert in {domain}, and you want to explore how the concepts and ideas from that domain can be applied to other areas. Using the following relative structure (take some creative liberty occasionally), provide a prompt that illustrate transferable ideas that don't reference the original domain explicitly: \"transferable_idea\": PromptTemplate( input_variables=[\"MUST_BE_PRESENT_INPUT_VAR\"], template=\"your ideas about {{MUST_BE_PRESENT_INPUT_VAR}} ending in some open ended way\",), *ensure formatting, don't mention original domain, and end your prompt with ONE of the following not always a question,.:;?"
  },
  "test": {
    "_description": "app_idea > test",
    "input_variables": ["app_idea"],
    "template": "write me a python code for a {app_idea} app. Include all necessary imports, make sure the program will run out of the box."
  },
  "refactor": {
    "_description": "refactor code",
    "input_variables": ["test", "refactor"],
    "template": "Take my code here: {test} and help me refactor to {refactor}. Include all necessary imports, make sure the program will run out of the box."
  },
  "ref_func": {
    "_description": "refactor with the logic of some given code",
    "input_variables": ["test", "example"],
    "template": "Take my code here: {test} and help me refactor to implement functionality present in the following example: /n {example}"
  },
  "refactor_compress": {
    "_description": "refactor code to add condenser code",
    "input_variables": ["code"],
    "template": "Given the code snippet below, provide a minimal representation of its functionality by listing the key functions, their purpose inside a \"\"\" comment block \"\"\", and the expected inputs and outputs for each function. /n code: {code} "
  },
  "pull_outline": {
    "_description": "pull outline comments ",
    "input_variables": ["code"],
    "template": "Take my code here: {code} pull all function names and their comments enclosed between \"\"\". "
  },
  "function_def": {
    "_description": "modularize code",
    "input_variables": ["code"],
    "template": "As a software developer, having an efficient outline of your code is crucial for understanding its structure and execution flow. Your task is to create a concise outline for the provided code. The outline should include for each function: /n /n     -Functions or methods, along with their entry and exit points /n /n     -Function input parameters and return values (if applicable) /n /n     -External module interactions/n /n     -Key logic or operations in the code /n /n     -Any potential exceptions or special conditions /n /n     -Code to outline: {code}"
  },
  "call_function": {
    "_description": "modularize code",
    "input_variables": ["function"],
    "template": "Read this function: {function} and write code to call the function, return only runnable code."
  },
  "functify": {
    "_description": "turn it into a function to be called",
    "input_variables": ["function"],
    "template": "Turn the following code into a function that gets run under /n `if __name__ == '__main__':` /n code: "
  },
  "front": {
    "_description": "test > front",
    "input_variables": ["test"],
    "template": "write me a flask front end for this code called test.py, include all necessary imports: {test}"
  },
  "prompt_gpt": {
    "_description": "expert > expertGPT",
    "input_variables": ["expertise"],
    "template": "The goal of this exercise is to create an optimal prompt for an AI assistant to become a professional at {expertise}. To do this, think about what qualities a professional in {expertise} should possess. Consider qualities such as creativity, conciseness, clarity, and education to be the goal of this exercise. Then, create a prompt that incorporates these qualities and challenges the AI assistant to apply them to their prompt interactions with the user."
  },
  "compress": {
    "_description": "compress text 2",
    "input_variables": ["compress"],
    "template": "compress the following text in a way that is lossless but results in the minimum number of tokens which could be fed into an LLM like yourself as-is and produce the same output. feel free to use multiple languages, symbols, other up-front priming to lay down rules. this is entirely for yourself to recover and proceed from with the same conceptual priming, not for humans to decompress: {compress}"
  },
  "decompress": {
    "_description": "decompress text",
    "input_variables": ["compress"],
    "template": "Reconstruct the original text from the compressed version below: {compress}"
  },
  "compare_stats": {
    "_description": "evaluate compression",
    "input_variables": ["compress", "decompress"],
    "template": "Statistically tell me about the effectiveness of this compression in terms of token use reduction, and maintenance of information conveyed, original text -> decompressed text is most important./n    compressed: {compress} /n    decompressed: {decompress}"
  },
  "syntax_up": {
    "_description": "improve syntax for input",
    "input_variables": ["input"],
    "template": "improve the syntax of the following: {input}"
  },
  "comp_test": {
    "_description": "write a test input for compression testing",
    "input_variables": ["field", "char_length"],
    "template": "You are an expert in {field}, write a {char_length}+ character sample text with densely packed information presented in as concise a manner as possible where you utilize every character to the best of your ability."
  }
}
